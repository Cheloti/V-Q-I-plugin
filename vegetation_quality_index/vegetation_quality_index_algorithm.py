# -*- coding: utf-8 -*-

"""
/***************************************************************************
 VegetationQualityIndex
                                 A QGIS plugin
 This plugin calculates the quality vegetation Index
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2021-03-01
        copyright            : (C) 2021 by Brian Cheloti
        email                : chelotibrian2016@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

__author__ = 'Brian Cheloti'
__date__ = '2021-03-01'
__copyright__ = '(C) 2021 by Brian Cheloti'

# This will get replaced with a git SHA1 when you do a git archive

__revision__ = '$Format:%H$'

import numpy as np
from osgeo import gdal, osr

from qgis.PyQt.QtCore import QCoreApplication
from py
from qgis.core import (QgsProcessing,
                       QgsFeatureSink,
                       QgsProcessingAlgorithm,
                       QgsProcessingParameterFeatureSource,
                       QgsProcessingParameterFeatureSink
                       QgsProcessingParameterFile)

from .utils import open_and_reproject_raster

class VegetationQualityIndexAlgorithm(QgsProcessingAlgorithm):
    """
    This is an example algorithm that takes a vector layer and
    creates a new identical one.

    It is meant to be used as an example of how to create your own
    algorithms and explain methods and variables used to do it. An
    algorithm like this will be available in all elements, and there
    is not need for additional work.

    All Processing algorithms should extend the QgsProcessingAlgorithm
    class.
    """

    # Constants used to refer to parameters and outputs. They will be
    # used when calling the algorithm from another algorithm, or when
    # calling from the QGIS console.

    OUTPUT = 'OUTPUT'
    FIRE_RISK = 'FIRE_RISK'
    EROSION_PROTECTION = 'EROSION_PROTECTION'
    DROUGHT_RESISTANCE = 'DROUGHT_RESISTANCE'
    PLANT_COVER = 'PLANT_COVER'
    REF_RASTER = 'REF_RASTER'

    def initAlgorithm(self, config):
        """
        Here we define the inputs and output of the algorithm, along
        with some other properties.
        """

        # We add the input vector features source. It can have any kind of
        # geometry.


       self.addParameter(
            QgsProcessingParameterFile(
                self.FIRE_RISK,
                description=self.tr('FIRE RISK (FR) map raster'),
                extension='tif'
            )
        )

        self.addParameter(
            QgsProcessingParameterFile(
                self.EROSION_PROTECTION,
                description=self.tr('EROSION PROTECTION (EP) map raster'),
                extension='tif'
            )
        )

        self.addParameter(
            QgsProcessingParameterFile(
                self.DROUGHT_RESISTANCE,
                description=self.tr('DROUGHT RESISTANCE (DR) map raster'),
                extension='tif'
            )
        )

        self.addParameter(
            QgsProcessingParameterFile(
                self.PLANT_COVER,
                description=self.tr('PLANT COVER (PC) map raster'),
                extension='tif'
            )
        )

        self.addParameter(
            QgsProcessingParameterFile(
                self.REF_RASTER,
                description=self.tr('REF RASTER (used for automated extent, cellsize, and CRS)'),
                extension='tif'
            )
        )

         # We add a raster destination in which to store the output raster when the
        # algorithm is run in QGIS.
        self.addParameter(
            QgsProcessingParameterRasterDestination(
                self.OUTPUT,
                self.tr('Wind Erosion Index (ILSWE) output raster'),
                'TIFF files (*.tif)'
            )
        )

    def processAlgorithm(self, parameters, context, feedback):
        """
        Here is where the processing itself takes place.
        """

        ref_file = self.parameterAsOutputLayer(parameters, self.REF_RASTER, context)
        ref_rast = gdal.Open(ref_file, gdal.GA_ReadOnly)

        # Open Fire Risk (FR) raster
        fr_file = self.parameterAsOutputLayer(parameters, self.FIRE_RISK,context)
        fr_rast = open_and_reproject_raster(fr_file, ref_file, feedback)
        fr_band = fr_rast.GetRasterBand(1)

        return {self.OUTPUT: output_file}

    def name(self):
        """
        Returns the algorithm name, used for identifying the algorithm. This
        string should be fixed for the algorithm, and must not be localised.
        The name should be unique within each provider. Names should contain
        lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'Vegetatio Quality Index'

    def displayName(self):
        """
        Returns the translated algorithm name, which should be used for any
        user-visible display of the algorithm name.
        """
        return self.tr(self.name())

    def group(self):
        """
        Returns the name of the group this algorithm belongs to. This string
        should be localised.
        """
        return self.tr(self.groupId())

    def groupId(self):
        """
        Returns the unique ID of the group this algorithm belongs to. This
        string should be fixed for the algorithm, and must not be localised.
        The group id should be unique within each provider. Group id should
        contain lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'VQI Models'

    def tr(self, string):
        return QCoreApplication.translate('Processing', string)

    def createInstance(self):
        return VegetationQualityIndexAlgorithm()
