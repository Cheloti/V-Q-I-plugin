# -*- coding: utf-8 -*-

"""
/***************************************************************************
 VegetationQualityIndex
                                 A QGIS plugin
 This plugin calculates the quality vegetation Index
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2021-03-01
        copyright            : (C) 2021 by Brian Cheloti
        email                : chelotibrian2016@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

__author__ = 'Brian Cheloti'
__date__ = '2021-03-01'
__copyright__ = '(C) 2021 by Brian Cheloti'

# This will get replaced with a git SHA1 when you do a git archive

__revision__ = '$Format:%H$'

import numpy as np
from osgeo import gdal, osr

from qgis.PyQt.QtCore import QCoreApplication
from PyQt5.QtGui import QColor
# Importing processing modules
from qgis.core import (QgsProcessingAlgorithm,
                       QgsProcessingLayerPostProcessorInterface,
                       QgsProcessingParameterFile,
                       QgsProcessingParameterRasterDestination,
                       QgsRasterLayer,
                       QgsRasterShader,
                       QgsColorRampShader,
                       QgsPresetSchemeColorRamp,
                       QgsRasterBandStats,
                       QgsSingleBandPseudoColorRenderer)

from .utils import open_and_reproject_raster


class VQIStylePostProcessor(QgsProcessingLayerPostProcessorInterface):
    instance = None

    def postProcessLayer(self, layer, context, feedback):

        """
        Apply quantile classification.
        """
        if not isinstance(layer, QgsRasterLayer):
            return

        feedback.pushInfo('Apply styling(symbology) to raster layer..')

        def get_quantile_ramp_item_list(layer):
            """
            Returns the quantile ramp item list and overrides the ramp items
            labels with our custom categories.

            We use a dummy shader function to help us with the quantile 
            classification
            """
            stats = layer.dataProvider().bandStatistics(1, QgsRasterBandStats.All)
            min_val = stats.minimumValue
            max_value = stats.maximumValue

            colors = [
                QColor('#4c724b'),
                QColor('#89a167'),
                QColor('#d9d98d'),
                QColor('#b08d64'),
                QColor('#8a514a')
            ]
            dummy_shader = QgsColorRampShader(minimumValue=min_val, maximumValue=max_val,
                                                colorRamp=QgsPresetSchemeColorRamp(colors=colors),
                                                type=QgsColorRampShader.Discrete,
                                                classificationMode=QgsColorRampShader.Quantile)
            dummy_shader.classifyColorRamp(classes=5, band=1, input=layer.dataProvider())

            labels = ['Very low', 'Low', 'Moderate', 'High', 'Very high']
            ramp_items = []
            for i, ramp_item in enumerate(dummy_shader.colorRampItemList()):
                ramp_item.label = labels[i]
                ramp_items.append(ramp_item)

            return ramp_items

        shader_fnc = QgsColorRampShader()
        shader_fnc.setColorRampType(QgsColorRampShader.Discrete)
        shader_fnc.setColorRampItemList(get_quantile_ramp_item_list(layer))

        shader = QgsRasterShader()
        shader.setRasterShaderFunction(shader_fnc)
        renderer = QgsSingleBandPseudoColorRenderer(layer.dataProvider(), 1, shader)
        layer.setRenderer(renderer)

    @staticmethod
    def create() -> 'VQIStylePostProcessor':
        """
        Returns a new instance of the post processor.
        """
        VQIStylePostProcessor.instance = VQIStylePostProcessor()
        return VQIStylePostProcessor.instance




class VegetationQualityIndexAlgorithm(QgsProcessingAlgorithm):
    """
    This is an example algorithm that takes a vector layer and
    creates a new identical one.

    It is meant to be used as an example of how to create your own
    algorithms and explain methods and variables used to do it. An
    algorithm like this will be available in all elements, and there
    is not need for additional work.

    All Processing algorithms should extend the QgsProcessingAlgorithm
    class.
    """

    # Constants used to refer to parameters and outputs. They will be
    # used when calling the algorithm from another algorithm, or when
    # calling from the QGIS console.

    OUTPUT = 'OUTPUT'
    FIRE_RISK = 'FIRE_RISK'
    EROSION_PROTECTION = 'EROSION_PROTECTION'
    DROUGHT_RESISTANCE = 'DROUGHT_RESISTANCE'
    PLANT_COVER = 'PLANT_COVER'
    REF_RASTER = 'REF_RASTER'

    def initAlgorithm(self, config):
        """
        Here we define the inputs and output of the algorithm, along
        with some other properties.
        """

        # We add the input vector features source. It can have any kind of
        # geometry.


        self.addParameter(
            QgsProcessingParameterFile(
                self.FIRE_RISK,
                description=self.tr('FIRE RISK (FR) map raster'),
                extension='tif'
            )
        )

        self.addParameter(
            QgsProcessingParameterFile(
                self.EROSION_PROTECTION,
                description=self.tr('EROSION PROTECTION (EP) map raster'),
                extension='tif'
            )
        )

        self.addParameter(
            QgsProcessingParameterFile(
                self.DROUGHT_RESISTANCE,
                description=self.tr('DROUGHT RESISTANCE (DR) map raster'),
                extension='tif'
            )
        )

        self.addParameter(
            QgsProcessingParameterFile(
                self.PLANT_COVER,
                description=self.tr('PLANT COVER (PC) map raster'),
                extension='tif'
            )
        )

        self.addParameter(
            QgsProcessingParameterFile(
                self.REF_RASTER,
                description=self.tr('REF RASTER (used for automated extent, cellsize, and CRS)'),
                extension='tif'
            )
        )

         # We add a raster destination in which to store the output raster when the
        # algorithm is run in QGIS.
        self.addParameter(
            QgsProcessingParameterRasterDestination(
                self.OUTPUT,
                self.tr('Vegetation Index (VQI) output raster'),
                'TIFF files (*.tif)'
            )
        )

    def processAlgorithm(self, parameters, context, feedback):
        """
        Here is where the processing itself takes place.
        """

        ref_file = self.parameterAsOutputLayer(parameters, self.REF_RASTER, context)
        ref_rast = gdal.Open(ref_file, gdal.GA_ReadOnly)

        # Open Fire Risk (FR) raster
        fr_file = self.parameterAsOutputLayer(parameters, self.FIRE_RISK, context)
        fr_rast = open_and_reproject_raster(fr_file, ref_file, feedback)
        fr_band = fr_rast.GetRasterBand(1)

        # Open EROSION PROTECTION (EP) raster
        ep_file = self.parameterAsOutputLayer(parameters, self.EROSION_PROTECTION, context)
        ep_rast = open_and_reproject_raster(ep_file, ref_file, feedback)
        ep_band = ep_rast.GetRasterBand(1)

        # Open Drought Resistance (DR) raster 
        dr_file = self.parameterAsOutputLayer(parameters, self.DROUGHT_RESISTANCE, context)
        dr_rast = open_and_reproject_raster(dr_file, ref_file, feedback)
        dr_band = dr_rast.GetRasterBand(1)

        # Open Plant Cover (PC) raster
        pc_file = self.parameterAsOutputLayer(parameters, self.PLANT_COVER, context)
        pc_rast = open_and_reproject_raster(pc_file, ref_file, feedback)
        pc_band = pc_rast.GetRasterBand(1)

        # Open the output raster for writing into Geotiff
        xorigin, xres, xskew, yorigin, yskew, yres =  ref_rast.GetGeoTransform()
        cols = ref_rast.RasterXSize
        rows = ref_rast.RasterYSize
        output_file = self.parameterAsOutputLayer(parameters, self.OUTPUT, context)
        driver = gdal.GetDriverByName("GTiff")
        out_rast = driver.Create(output_file, cols, rows, 1, gdal.GDT_Float64)
        out_rast.SetGeoTransform((xorigin, xres, 0, yorigin, 0, yres))
        out_band = out_rast.GetRasterBand(1)

        # Processing the raster datasets in chunks/blocks
        block_xsize, block_ysize = fr_band.GetBlockSize()
        for b_y, yoff in enumerate(range(0, fr_rast.RasterYSize, block_ysize)):
            for b_x, xoff in enumerate(range(0, fr_rast.RasterXSize, block_xsize)):
                win_xsize, win_ysize = fr_band.GetActualBlockSize(b_x, b_y)

                FR = fr_band.ReadAsArray(xoff=xoff, yoff=yoff, win_xsize=win_xsize, win_ysize=win_ysize)
                fr_nodata_mask = np.ma.masked_equal(FR, fr_band.GetNoDataValue()).mask
                FR = FR.astype('float64')
                FR = np.ma.masked_array(FR, fr_nodata_mask)

                DR = dr_band.ReadAsArray(xoff=xoff, yoff=yoff, win_xsize=win_xsize, win_ysize=win_ysize)
                dr_nodata_mask = np.ma.masked_equal(DR, dr_band.GetNoDataValue()).mask
                DR = DR.astype('float64')
                DR = np.ma.masked_array(DR, dr_nodata_mask)

                PC = pc_band.ReadAsArray(xoff=xoff, yoff=yoff, win_xsize=win_xsize, win_ysize=win_ysize)
                pc_nodata_mask = np.ma.masked_equal(PC, pc_band.GetNoDataValue()).mask
                PC = PC.astype('float64')
                PC = np.ma.masked_array(PC, pc_nodata_mask)

                EP = ep_band.ReadAsArray(xoff=xoff, yoff=yoff, win_xsize=win_xsize, win_ysize=win_ysize)
                ep_nodata_mask = np.ma.masked_equal(EP, ep_band.GetNoDataValue()).mask
                EP = EP.astype('float64')
                EP = np.ma.masked_array(EP, ep_nodata_mask)


                # Calculation of Vegetation Quality Index (VQI)
                VQI = (FR * EP * DR * PC)**(0.25)

                # Fill  the nodata value with QGIS's default
                VQI = VQI.filled(-3.4028230607370965e+38)

                # Write processed block to file
                out_band.WriteArray(VQI, xoff=xoff, yoff=yoff)


        out_band.SetNoDataValue(-3.4028230607370965e+38)
        outRasterSRS = osr.SpatialReference()
        outRasterSRS.ImportFromWkt(ref_rast.GetProjectionRef())
        out_rast.SetProjection(outRasterSRS.ExportToWkt())
        out_band.FlushCache()


        # Delete the variables to trigger the writing of the output file
        out_rast = None
        out_band = None
        driver = None

        # VQIStylePostProcessor.instance = VQIStylePostProcessor()

        # if context.willLoadLayerOnCompletion(output_file):
        #     context.layerToLoadOnCompletionDetails(output_file).setPostProcessor(
        #         VQIStylePostProcessor.create()
        #     )
        if context.willLoadLayerOnCompletion(output_file):
            context.layerToLoadOnCompletionDetails(output_file).setPostProcessor(
                VQIStylePostProcessor.create()
            )
        return {self.OUTPUT: output_file}




    def name(self):
        """
        Returns the algorithm name, used for identifying the algorithm. This
        string should be fixed for the algorithm, and must not be localised.
        The name should be unique within each provider. Names should contain
        lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'Vegetation Quality Index'

    def displayName(self):
        """
        Returns the translated algorithm name, which should be used for any
        user-visible display of the algorithm name.
        """
        return self.tr(self.name())

    def group(self):
        """
        Returns the name of the group this algorithm belongs to. This string
        should be localised.
        """
        return self.tr(self.groupId())

    def groupId(self):
        """
        Returns the unique ID of the group this algorithm belongs to. This
        string should be fixed for the algorithm, and must not be localised.
        The group id should be unique within each provider. Group id should
        contain lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'VQI Models'

    def tr(self, string):
        return QCoreApplication.translate('Processing', string)

    def createInstance(self):
        return VegetationQualityIndexAlgorithm()
